{"version":3,"sources":["components/card/card.component.jsx","components/cardlist/cardlist.component.jsx","components/searchbox/searchbox.component.jsx","components/scroll/scroll.component.jsx","components/errorboundary/errorboundary.component.jsx","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","robot","id","name","email","CardList","robots","map","SearchBox","type","placeholder","onChange","onSearchChange","Scroll","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","event","searchField","target","value","fetch","then","response","json","user","filterRobots","filter","toLowerCase","includes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uVAgBeA,EAbF,SAACC,GACZ,OACE,sBAAKC,UAAU,OAAf,UACE,qBACEC,IAAI,QACJC,IAAG,+BAA0BH,EAAMI,MAAMC,GAAtC,mBAEL,6BAAKL,EAAMI,MAAME,OACjB,4BAAIN,EAAMI,MAAMG,YCGPC,G,MAVE,SAACR,GAChB,OACE,qBAAKC,UAAU,WAAf,SACGD,EAAMS,OAAOC,KAAI,SAACN,GAAD,OAChB,cAAC,EAAD,CAAqBA,MAAOA,GAAjBA,EAAMC,WCOVM,G,MAZG,SAACX,GACjB,OACE,uBACEC,UAAU,YACVW,KAAK,SACLN,KAAK,SACLO,YAAY,sBACZC,SAAUd,EAAMe,mBCHPC,G,MAJA,SAAChB,GACd,OAAO,qBAAKC,UAAU,SAAf,SAAyBD,EAAMiB,aCoBzBC,G,wDApBb,aAAe,IAAD,8BACZ,gBAEKC,MAAQ,CACXC,UAAU,GAJA,E,qDAQd,SAAkBC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,oBAG5B,WACE,OAAIG,KAAKJ,MAAMC,SACN,iDAEFG,KAAKvB,MAAMiB,a,GAjBMQ,IAAMC,YC6CnBC,E,kDAxCb,aAAe,IAAD,8BACZ,gBAeFZ,eAAiB,SAACa,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAd1C,EAAKZ,MAAQ,CACXV,OAAQ,GACRoB,YAAa,GACbT,UAAU,GANA,E,qDAUd,WAAqB,IAAD,OAClBY,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAU,EAAKZ,SAAS,CAAEf,OAAQ2B,S,oBAO5C,WAAU,IAAD,EACyBb,KAAKJ,MAA7BV,EADD,EACCA,OAAQoB,EADT,EACSA,YACVQ,EAAe5B,EAAO6B,QAAO,SAAClC,GAClC,OAAOA,EAAME,KAAKiC,cAAcC,SAASX,EAAYU,kBAGvD,OACE,sBAAKtC,UAAU,MAAf,UACE,wCACA,cAAC,EAAD,CAAWc,eAAgBQ,KAAKR,iBAChC,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAUN,OAAQ4B,e,GAjCZZ,IAAMC,WCKTe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBV,MAAK,YAAkD,IAA/CW,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.fccadb79.chunk.js","sourcesContent":["import React from 'react';\nimport './card.style.css';\n\nconst Card = (props) => {\n  return (\n    <div className=\"card\">\n      <img\n        alt=\"Robot\"\n        src={`https://robohash.org/${props.robot.id}?size=180x180`}\n      />\n      <h2>{props.robot.name}</h2>\n      <p>{props.robot.email}</p>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from '../card/card.component';\nimport './cardlist.style.css';\n\nconst CardList = (props) => {\n  return (\n    <div className=\"cardlist\">\n      {props.robots.map((robot) => (\n        <Card key={robot.id} robot={robot} />\n      ))}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\nimport './searchbox.style.css';\n\nconst SearchBox = (props) => {\n  return (\n    <input\n      className=\"searchbox\"\n      type=\"search\"\n      name=\"search\"\n      placeholder=\"Enter robot name(s)\"\n      onChange={props.onSearchChange}\n    />\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\nimport '../scroll/scroll.style.css';\n\nconst Scroll = (props) => {\n  return <div className=\"scroll\">{props.children}</div>;\n};\n\nexport default Scroll;\n","import React from 'react';\nimport './errorboundary.style.css';\n\nclass ErrorBoundary extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      hasError: false,\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h3>Error occurred.</h3>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;\n","import '../containers/App.css';\nimport React from 'react';\nimport CardList from '../components/cardlist/cardlist.component';\nimport SearchBox from '../components/searchbox/searchbox.component';\nimport Scroll from '../components/scroll/scroll.component';\nimport ErrorBoundary from '../components/errorboundary/errorboundary.component';\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    this.state = {\n      robots: [],\n      searchField: '',\n      hasError: false,\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then((response) => response.json())\n      .then((user) => this.setState({ robots: user }));\n  }\n\n  onSearchChange = (event) => {\n    this.setState({ searchField: event.target.value });\n  };\n\n  render() {\n    const { robots, searchField } = this.state;\n    const filterRobots = robots.filter((robot) => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n\n    return (\n      <div className=\"App\">\n        <h1>Robots</h1>\n        <SearchBox onSearchChange={this.onSearchChange} />\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filterRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}